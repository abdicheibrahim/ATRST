@model IEnumerable<ProjetAtrst.Models.ProjectTask>
@{
    ViewData["Title"] = "les tâches";
    Layout = "_LayoutProject";
}

<div class="mb-4">
    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-2">
        <h2 class="mb-0">Les tâches</h2>
        <div class="d-flex flex-column flex-sm-row gap-2">
            <button type="button" class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#createTaskModal">
                <i class="bi bi-plus-square"></i> Add Task
            </button>
        </div>
    </div>
</div>

<!-- عرض رسالة النجاح -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- جدول عرض المهام -->
<div class="card">
    <div class="card-body">
        @if (Model != null && Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>Nom de la tâche</th>
                            <th>Description</th>
                            <th>Statut</th>
                            <th>Priorité</th>
                            <th>Progression</th>
                            <th>Dates</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var task in Model)
                        {
                            <tr>
                                <td>@task.TaskName</td>
                                <td>
                                    @(task.Description?.Substring(0, Math.Min(50, task.Description?.Length ?? 0)) + (task.Description?.Length > 50 ? "..." : ""))
                                </td>
                                <td>
                                    <span class="badge
                                                @(task.Status == "Pending" ? "bg-warning" :
                                                                                    task.Status == "InProgress" ? "bg-primary" : "bg-success")">
                                        @(task.Status == "Pending" ? "En attente" :
                                                                        task.Status == "InProgress" ? "En cours" : "Terminée")
                                                                                                                          </span>
                                                                                                                      </td>
                                                                                                                      <td>
                                                                                                                          <span class="badge
                                                @(task.Priority == 1 ? "bg-danger" :
                                                                                    task.Priority == 2 ? "bg-warning" : "bg-success")">
                                        @(task.Priority == 1 ? "Haute 🔴" :
                                                                        task.Priority == 2 ? "Moyenne 🟡" : "Basse 🟢")
                            </span>
                        </td>
                        <td>
                            <div class="progress" style="height: 20px;">
                                <div class="progress-bar"
                                     role="progressbar"
                                     style="width: @(task.Progress)%"
                                     aria-valuenow="@task.Progress"
                                     aria-valuemin="0"
                                     aria-valuemax="100">
                                    @task.Progress%
                                </div>
                            </div>
                        </td>
                        <td>
                            <small>
                                Début: @(task.StartDate.ToString("dd/MM/yyyy"))<br />
                                Fin: @(task.EndDate.ToString("dd/MM/yyyy"))
                            </small>
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-sm btn-outline-primary"
                                        onclick="editTask(@task.TaskId)" title="Modifier">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger"
                                        onclick="deleteTask(@task.TaskId)" title="Supprimer">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-tasks fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">Aucune tâche trouvée</h4>
                <p class="text-muted">Commencez par créer votre première tâche</p>
            </div>
        }
    </div>
</div>

<!-- الـ Modal لإنشاء المهمة -->
<div class="modal fade" id="createTaskModal" tabindex="-1" aria-labelledby="createTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="createTaskModalLabel">
                    <i class="fas fa-plus-circle me-2"></i> Créer une nouvelle tâche
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("_CreateTaskPartial", new ProjetAtrst.ViewModels.ProjectTask.ProjectTaskViewModel())
            </div>
        </div>
    </div>
</div>

<!-- Modal للتعديل -->
<div class="modal fade" id="editTaskModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Modifier la tâche</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="editTaskModalBody">
                <!-- سيتم تحميل النموذج هنا عبر AJAX -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Synchronize progress range slider with number input
        document.addEventListener('DOMContentLoaded', function () {
            const progressRange = document.getElementById('progressRange');
            const progressInput = document.getElementById('progressInput');

            if (progressRange && progressInput) {
                progressRange.addEventListener('input', function () {
                    progressInput.value = this.value;
                });

                progressInput.addEventListener('input', function () {
                    progressRange.value = this.value;
                    if (this.value < 0) this.value = 0;
                    if (this.value > 100) this.value = 100;
                });
            }

            // Date validation logic
            const startDate = document.querySelector('input[name="StartDate"]');
            const endDate = document.querySelector('input[name="EndDate"]');

            if (startDate) {
                startDate.addEventListener('change', function () {
                    if (endDate && endDate.value && new Date(this.value) > new Date(endDate.value)) {
                        alert('La date de début ne peut pas être postérieure à la date de fin');
                        this.value = '';
                    }
                });
            }

            if (endDate) {
                endDate.addEventListener('change', function () {
                    if (startDate && startDate.value && new Date(this.value) < new Date(startDate.value)) {
                        alert('La date de fin ne peut pas être antérieure à la date de début');
                        this.value = '';
                    }
                });
            }

            // Auto-resize textarea
            const textarea = document.querySelector('textarea[name="Description"]');
            if (textarea) {
                textarea.addEventListener('input', function () {
                    this.style.height = 'auto';
                    this.style.height = this.scrollHeight + 'px';
                });
            }

            // Form submission handling with AJAX
            const form = document.getElementById('createTaskForm');
            if (form) {
                form.addEventListener('submit', function (e) {
                    e.preventDefault();

                    const formData = new FormData(this);
                    const submitButton = this.querySelector('button[type="submit"]');
                    const originalText = submitButton.innerHTML;
                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Création...';
                    submitButton.disabled = true;

                    fetch(this.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const modal = bootstrap.Modal.getInstance(document.getElementById('createTaskModal'));
                            if (modal) modal.hide();

                            // عرض رسالة النجاح
                            const alertHtml = `
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    ${data.message}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                </div>
                            `;
                            document.querySelector('.mb-4').insertAdjacentHTML('afterend', alertHtml);

                            // تحديث الجدول
                            location.reload();
                        } else {
                            alert('Une erreur est survenue: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Une erreur est survenue lors de la création de la tâche.');
                    })
                    .finally(() => {
                        submitButton.innerHTML = originalText;
                        submitButton.disabled = false;
                    });
                });
            }
        });

        // دوال للتعامل مع التعديل والحذف
        function editTask(taskId) {
            fetch(`/ProjectTasks/Edit/${taskId}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('editTaskModalBody').innerHTML = html;
                    new bootstrap.Modal(document.getElementById('editTaskModal')).show();

                    // تطبيق نفس المنطق للحقول في نموذج التعديل
                    applyEditFormLogic();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Erreur lors du chargement du formulaire de modification');
                });
        }

        function deleteTask(taskId) {
            if (confirm('Êtes-vous sûr de vouloir supprimer cette tâche?')) {
                // إنشاء نموذج مخفي للحذف
                const form = document.createElement('form');
                form.method = 'post';
                form.action = `/ProjectTasks/Delete/${taskId}`;

                // إضافةAntiForgeryToken
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    const hiddenField = document.createElement('input');
                    hiddenField.type = 'hidden';
                    hiddenField.name = '__RequestVerificationToken';
                    hiddenField.value = token.value;
                    form.appendChild(hiddenField);
                }

                document.body.appendChild(form);
                form.submit();
            }
        }

        function applyEditFormLogic() {
            // تطبيق نفس المنطق للحقول في نموذج التعديل
            const progressRange = document.getElementById('progressRangeEdit');
            const progressInput = document.getElementById('progressInputEdit');

            if (progressRange && progressInput) {
                progressRange.addEventListener('input', function () {
                    progressInput.value = this.value;
                });

                progressInput.addEventListener('input', function () {
                    progressRange.value = this.value;
                    if (this.value < 0) this.value = 0;
                    if (this.value > 100) this.value = 100;
                });
            }

            // Date validation logic for edit form
            const startDate = document.querySelector('#editTaskForm input[name="StartDate"]');
            const endDate = document.querySelector('#editTaskForm input[name="EndDate"]');

            if (startDate) {
                startDate.addEventListener('change', function () {
                    if (endDate && endDate.value && new Date(this.value) > new Date(endDate.value)) {
                        alert('La date de début ne peut pas être postérieure à la date de fin');
                        this.value = '';
                    }
                });
            }

            if (endDate) {
                endDate.addEventListener('change', function () {
                    if (startDate && startDate.value && new Date(this.value) < new Date(startDate.value)) {
                        alert('La date de fin ne peut pas être antérieure à la date de début');
                        this.value = '';
                    }
                });
            }

            // Auto-resize textarea for edit form
            const textarea = document.querySelector('#editTaskForm textarea[name="Description"]');
            if (textarea) {
                textarea.addEventListener('input', function () {
                    this.style.height = 'auto';
                    this.style.height = this.scrollHeight + 'px';
                });
            }

            // Form submission handling for edit form
            const editForm = document.getElementById('editTaskForm');
            if (editForm) {
                editForm.addEventListener('submit', function (e) {
                    e.preventDefault();

                    const formData = new FormData(this);
                    const submitButton = this.querySelector('button[type="submit"]');
                    const originalText = submitButton.innerHTML;
                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Mise à jour...';
                    submitButton.disabled = true;

                    fetch(this.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const modal = bootstrap.Modal.getInstance(document.getElementById('editTaskModal'));
                            if (modal) modal.hide();

                            // عرض رسالة النجاح
                            const alertHtml = `
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    ${data.message}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                </div>
                            `;
                            document.querySelector('.mb-4').insertAdjacentHTML('afterend', alertHtml);

                            // تحديث الجدول
                            location.reload();
                        } else {
                            alert('Une erreur est survenue: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Une erreur est survenue lors de la mise à jour de la tâche.');
                    })
                    .finally(() => {
                        submitButton.innerHTML = originalText;
                        submitButton.disabled = false;
                    });
                });
            }
        }
    </script>
}