@using System.Text.Json
@using ProjetAtrst.ViewModels.Partner
@model EditPartnerProfileViewModel

@{
    Layout = "_LayoutResearcher";
}

@{
    ViewData["Title"] = "Profil";
}

<div class="alert alert-success text-center alert-dismissible fade show" role="alert">
    Votre profil est<strong> complet.</strong> Vous pouvez le modifier ici.
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Fermer"></button>
</div>
<form asp-action="EditProfile" method="post">

    <div class="row shadow-sm g-3 needs-validation p-3 mb-5 mt-3 bg-white border rounded">
    
        <h5>Détails Partenaire</h5>

        <div class="col-md-6">
            <label asp-for="Baccalaureat" class="form-label"></label>
            <input type="text" class="form-control" asp-for="Baccalaureat" />
            <span asp-validation-for="Baccalaureat" class="text-danger"></span>
        </div>

        <div class="col-md-6">
            <label asp-for="Diploma" class="form-label">Diplôme</label>
            <input type="text" class="form-control input" asp-for="Diploma">
            <span asp-validation-for="Diploma"></span>
        </div>

        <div class="col-md-6">
            <label asp-for="Profession" class="form-label"></label>
            <input type="text" class="form-control" asp-for="Profession" />
            <span asp-validation-for="Profession" class="text-danger"></span>
        </div>

        <div class="col-md-6">
            <label asp-for="Speciality" class="form-label">Spécialité</label>
            <input type="text" class="form-control input" asp-for="Speciality">
            <span asp-validation-for="Speciality"></span>
        </div>
        <!-- Establishment -->
        <input type="hidden" asp-for="Establishment" id="establishmentHidden" />
        <div class="col-md-6">
            <label class="form-label">Établissement</label>
            <select class="form-select" id="establishmentSelect"></select>
            <input type="text" id="customEstablishment" class="form-control mt-2 d-none"
                   placeholder="Entrez le nom de l'établissement manuellement" />
            <span asp-validation-for="Establishment" class="text-danger"></span>
        </div>

        <div class="col-md-12">
            <label asp-for="PartnerResearchPrograms" class="form-label"></label>
            <textarea class="form-control" asp-for="PartnerResearchPrograms"></textarea>
            <span asp-validation-for="PartnerResearchPrograms" class="text-danger"></span>
        </div>

        <div class="col-md-12">
            <label asp-for="PartnerSocioEconomicWorks" class="form-label"></label>
            <textarea class="form-control" asp-for="PartnerSocioEconomicWorks"></textarea>
            <span asp-validation-for="PartnerSocioEconomicWorks" class="text-danger"></span>
        </div>
    </div>

  


    <button type="submit" id="submitBtn" class="btn btn-success w-100">
        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true" id="spinner"></span>
        <span id="btnText">Enregistrer les modifications</span>
    </button>


</form>


@section Scripts
{
    <partial name="_ValidationScriptsPartial" />
    <!--select2-->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css  " rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js  "></script>
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />

    <script src="~/js/Spinner.js"></script>

    <!-- Select2 -->
    <script>
        // مزامنة القيم مع الحقول المخفية -- وتجاهل placeholder كنص مرسل
        function syncField(selectId, inputId, hiddenId) {
            const $sel = $('#' + selectId);
            const val = $sel.val();
            const placeholder = $sel.attr('data-placeholder') || '';
            const isOther = (val === 'Autre' || val === 'Other');

            if (isOther) {
                // إذا اخترنا "Autre" نُظهر الحقل اليدوي ونأخذ منه القيمة
                $('#' + inputId).removeClass('d-none').attr('required', 'required');
                $('#' + hiddenId).val($('#' + inputId).val().trim());
            } else {
                // إخفاء الحقل اليدوي
                $('#' + inputId).addClass('d-none').removeAttr('required').val('');

                // نتأكد أنّ القيمة المرسلة ليست فارغة أو نفس نص الـ placeholder
                if (val === null || val === undefined || val === '' || val === placeholder) {
                    $('#' + hiddenId).val('');
                } else {
                    $('#' + hiddenId).val(val);
                }
            }
        }

        // تهيئة Select2 مع وضع data-placeholder للمقارنة لاحقًا
        function initSelect2(selector, type, placeholder, appendAutre = true, minimumInputLength = 2, endpointUrl) {
            const url = endpointUrl || '@Url.Action("SearchDropdown", "Project")';

            // خزّن النص كـ data attribute للمقارنة لاحقًا
            $(selector).attr('data-placeholder', placeholder);

            $(selector).select2({
                theme: 'bootstrap-5',
                width: '100%',
                placeholder: placeholder,
                allowClear: true,
                minimumInputLength: minimumInputLength,
                ajax: {
                    url: url,
                    data: function (params) {
                        return {
                            term: params.term || '',
                            type: type,
                            take: 25
                        };
                    },
                    delay: 200,
                    processResults: function (data) {
                        // نتأكد من أن البيانات بصيغة { id, text }
                        if (appendAutre && !data.some(d => (d.id || d.value) === 'Autre')) {
                            data.push({ id: 'Autre', text: 'Autre' });
                        }
                        return { results: data };
                    }
                }
            });

            // تركيز تلقائي داخل حقل البحث عند الفتح
            $(selector).on('select2:open', function () {
                setTimeout(function () {
                    document.querySelector('.select2-container--open .select2-search__field')?.focus();
                }, 0);
            });
        }

        // تبديل بين الإدخال اليدوي والاختيار من القائمة
        function toggleCustomInput(selectId, inputId) {
            const $sel = $('#' + selectId);
            const $inp = $('#' + inputId);
            const val = $sel.val();
            const isOther = (val === 'Autre' || val === 'Other');

            if (isOther) {
                $sel.prop('disabled', true);
                $inp.removeClass('d-none').attr('required', 'required');
            } else {
                $sel.prop('disabled', false);
                $inp.addClass('d-none').removeAttr('required');
            }
        }

        // تعيين قيمة ابتدائية (نتجاهل null / undefined / '' لكن نسمح بـ 0)
        function setInitialValue(selector, value, text) {
            if (value === null || value === undefined || value === '') return;
            const option = new Option(text || value, value, true, true);
            $(selector).append(option).trigger('change.select2');
        }

        $(document).ready(function () {
            // 1) تهيئة القوائم
            initSelect2('#establishmentSelect', 'Establishments', '-- Sélectionnez l\'établissement --', true, 2);
            initSelect2('#gradeSelect', 'Grades', '-- Sélectionnez un grade / diplôme --', true, 0); // صفر لعرض بدون كتابة
           // initSelect2('#statutSelect', 'Statuts', '-- Sélectionnez un statut --', true, 2);

            // 2) قيم ابتدائية من الموديل
            const initEst = @Html.Raw(JsonSerializer.Serialize(Model.Establishment));
            // const initGrade = Html.Raw(JsonSerializer.Serialize(Model.Grade));
           // const initStatut = Html.Raw(JsonSerializer.Serialize(Model.Statut));

            setInitialValue('#establishmentSelect', initEst);
            // setInitialValue('#gradeSelect', initGrade);
           // setInitialValue('#statutSelect', initStatut);

            // 3) تفعيل/تعطيل الإدخال اليدوي حسب القيمة الحالية
            toggleCustomInput('establishmentSelect', 'customEstablishment');
            // toggleCustomInput('gradeSelect', 'customGrade');
            //toggleCustomInput('statutSelect', 'customStatut');

            $('#establishmentSelect').on('change', function () {
                toggleCustomInput('establishmentSelect', 'customEstablishment');
            });
            // $('#gradeSelect').on('change', function () {
            //     toggleCustomInput('gradeSelect', 'customGrade');
            // });
            // $('#statutSelect').on('change', function () {
            //     toggleCustomInput('statutSelect', 'customStatut');
            // });

            // 4) مزامنة قبل الإرسال (نمنع إرسال نص placeholder)
            $('form').on('submit', function () {
                syncField('establishmentSelect', 'customEstablishment', 'establishmentHidden');
                // syncField('gradeSelect', 'customGrade', 'gradeHidden');
                // syncField('statutSelect', 'customStatut', 'statutHidden');
            });
        });
    </script>
   
}


